"""implement Caption model

Revision ID: 09aa6cdc023b
Revises: 
Create Date: 2022-05-06 01:23:21.037524

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '09aa6cdc023b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('channel',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('num_subscribers', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('video',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=False),
    sa.Column('custom_score', sa.Float(), nullable=True),
    sa.Column('channel_id', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('caption',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('video_id', sa.String(), nullable=False),
    sa.Column('length', sa.Integer(), nullable=False),
    sa.Column('compr', sa.LargeBinary(), nullable=False),
    sa.Column('compr_length', sa.Integer(), nullable=False),
    sa.Column('lang', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['video_id'], ['video.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('specific_task')
    op.drop_table('activity')
    op.drop_table('task_category_association')
    op.drop_table('habbit_category_association')
    op.drop_table('tag')
    op.drop_table('habbit')
    op.drop_table('task')
    op.drop_table('task_category')
    op.drop_table('task_tag_association')
    op.drop_table('habbit_tag_association')
    op.drop_table('message')
    op.drop_table('habbit_category')
    op.drop_table('telegram_user')
    op.drop_table('message_category_association')
    op.drop_table('generic_task')
    op.drop_table('message_category')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('message_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('message_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='message_category_pkey'),
    sa.UniqueConstraint('name', name='message_category_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('generic_task',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('generic_task_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='generic_task_pkey'),
    sa.UniqueConstraint('description', name='generic_task_description_key'),
    sa.UniqueConstraint('name', name='generic_task_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('message_category_association',
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message_category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_category_id'], ['message_category.id'], name='message_category_association_message_category_id_fkey'),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], name='message_category_association_message_id_fkey'),
    sa.UniqueConstraint('message_id', 'message_category_id', name='message_category_association_message_id_message_category_id_key')
    )
    op.create_table('telegram_user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('telegram_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('ext_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_bot', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('language_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='telegram_user_pkey'),
    sa.UniqueConstraint('ext_id', name='telegram_user_ext_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('habbit_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('habbit_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='habbit_category_pkey'),
    sa.UniqueConstraint('name', name='habbit_category_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('message',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['telegram_user.id'], name='message_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='message_pkey')
    )
    op.create_table('habbit_tag_association',
    sa.Column('habbit_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['habbit_id'], ['habbit.id'], name='habbit_tag_association_habbit_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='habbit_tag_association_tag_id_fkey'),
    sa.UniqueConstraint('habbit_id', 'tag_id', name='habbit_tag_association_habbit_id_tag_id_key')
    )
    op.create_table('task_tag_association',
    sa.Column('generic_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['generic_task_id'], ['generic_task.id'], name='task_tag_association_generic_task_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='task_tag_association_tag_id_fkey'),
    sa.UniqueConstraint('generic_task_id', 'tag_id', name='task_tag_association_generic_task_id_tag_id_key')
    )
    op.create_table('task_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_category_pkey'),
    sa.UniqueConstraint('name', name='task_category_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('task',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('specific_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('done', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('(url IS NULL) <> (description IS NULL)', name='url_or_description_not_null'),
    sa.ForeignKeyConstraint(['specific_task_id'], ['specific_task.id'], name='task_specific_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['telegram_user.id'], name='task_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_pkey'),
    sa.UniqueConstraint('description', name='task_description_key'),
    sa.UniqueConstraint('url', name='task_url_key'),
    sa.UniqueConstraint('user_id', 'specific_task_id', 'description', 'done', name='uix_task_across_stask_description_done'),
    sa.UniqueConstraint('user_id', 'specific_task_id', 'description', 'due_date', name='uix_task_across_stask_description_duedate'),
    sa.UniqueConstraint('user_id', 'specific_task_id', 'url', 'done', name='uix_task_across_stask_url_done'),
    sa.UniqueConstraint('user_id', 'specific_task_id', 'url', 'due_date', name='uix_task_across_stask_url_duedate'),
    postgresql_ignore_search_path=False
    )
    op.create_table('habbit',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('interval', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='habbit_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['telegram_user.id'], name='habbit_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='habbit_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tag',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tag_pkey'),
    sa.UniqueConstraint('name', name='tag_name_key')
    )
    op.create_table('habbit_category_association',
    sa.Column('habbit_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('habbit_category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['habbit_category_id'], ['habbit_category.id'], name='habbit_category_association_habbit_category_id_fkey'),
    sa.ForeignKeyConstraint(['habbit_id'], ['habbit.id'], name='habbit_category_association_habbit_id_fkey'),
    sa.UniqueConstraint('habbit_id', 'habbit_category_id', name='habbit_category_association_habbit_id_habbit_category_id_key')
    )
    op.create_table('task_category_association',
    sa.Column('generic_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('task_category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['generic_task_id'], ['generic_task.id'], name='task_category_association_generic_task_id_fkey'),
    sa.ForeignKeyConstraint(['task_category_id'], ['task_category.id'], name='task_category_association_task_category_id_fkey'),
    sa.UniqueConstraint('generic_task_id', 'task_category_id', name='task_category_association_generic_task_id_task_category_id_key')
    )
    op.create_table('activity',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('habbit_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['habbit_id'], ['habbit.id'], name='activity_habbit_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='activity_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['telegram_user.id'], name='activity_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activity_pkey'),
    sa.UniqueConstraint('user_id', 'habbit_id', 'start', 'end', name='uix_activity_across_habbits'),
    sa.UniqueConstraint('user_id', 'task_id', 'start', 'end', name='uix_activity_across_tasks')
    )
    op.create_table('specific_task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('generic_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['generic_task_id'], ['generic_task.id'], name='specific_task_generic_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='specific_task_pkey'),
    sa.UniqueConstraint('description', name='specific_task_description_key'),
    sa.UniqueConstraint('name', name='specific_task_name_key')
    )
    op.drop_table('caption')
    op.drop_table('video')
    op.drop_table('channel')
    # ### end Alembic commands ###
